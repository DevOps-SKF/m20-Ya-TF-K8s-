ubuntu@vmmaster:~$ sudo swapoff -a
ubuntu@vmmaster:~$ sudo kubeadm --pod-network-cidr=10.244.0.0/16 init

[init] Using Kubernetes version: v1.20.1
[preflight] Running pre-flight checks
[preflight] Pulling images required for setting up a Kubernetes cluster
[preflight] This might take a minute or two, depending on the speed of your internet connection
[preflight] You can also perform this action in beforehand using 'kubeadm config images pull'
[certs] Using certificateDir folder "/etc/kubernetes/pki"
[certs] Generating "ca" certificate and key
[certs] Generating "apiserver" certificate and key
[certs] apiserver serving cert is signed for DNS names [kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local vmmaster.arlab.pw] and IPs [10.96.0.1 172.19.0.11]
[certs] Generating "apiserver-kubelet-client" certificate and key
[certs] Generating "front-proxy-ca" certificate and key
[certs] Generating "front-proxy-client" certificate and key
[certs] Generating "etcd/ca" certificate and key
[certs] Generating "etcd/server" certificate and key
[certs] etcd/server serving cert is signed for DNS names [localhost vmmaster.arlab.pw] and IPs [172.19.0.11 127.0.0.1 ::1]
[certs] Generating "etcd/peer" certificate and key
[certs] etcd/peer serving cert is signed for DNS names [localhost vmmaster.arlab.pw] and IPs [172.19.0.11 127.0.0.1 ::1]
[certs] Generating "etcd/healthcheck-client" certificate and key
[certs] Generating "apiserver-etcd-client" certificate and key
[certs] Generating "sa" key and public key
[kubeconfig] Using kubeconfig folder "/etc/kubernetes"
[kubeconfig] Writing "admin.conf" kubeconfig file
[kubeconfig] Writing "kubelet.conf" kubeconfig file
[kubeconfig] Writing "controller-manager.conf" kubeconfig file
[kubeconfig] Writing "scheduler.conf" kubeconfig file
[kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
[kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
[kubelet-start] Starting the kubelet
[control-plane] Using manifest folder "/etc/kubernetes/manifests"
[control-plane] Creating static Pod manifest for "kube-apiserver"
[control-plane] Creating static Pod manifest for "kube-controller-manager"
[control-plane] Creating static Pod manifest for "kube-scheduler"
[etcd] Creating static Pod manifest for local etcd in "/etc/kubernetes/manifests"
[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory "/etc/kubernetes/manifests". This can take up to 4m0s
[apiclient] All control plane components are healthy after 21.503860 seconds
[upload-config] Storing the configuration used in ConfigMap "kubeadm-config" in the "kube-system" Namespace
[kubelet] Creating a ConfigMap "kubelet-config-1.20" in namespace kube-system with the configuration for the kubelets in the cluster
[upload-certs] Skipping phase. Please see --upload-certs
[mark-control-plane] Marking the node vmmaster.arlab.pw as control-plane by adding the labels "node-role.kubernetes.io/master=''" and "node-role.kubernetes.io/control-plane='' (deprecated)"
[mark-control-plane] Marking the node vmmaster.arlab.pw as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule]
[bootstrap-token] Using token: 9vmhsd.6542p6c90lvctme8
[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles
[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to get nodes
[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials
[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token
[bootstrap-token] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster
[bootstrap-token] Creating the "cluster-info" ConfigMap in the "kube-public" namespace
[kubelet-finalize] Updating "/etc/kubernetes/kubelet.conf" to point to a rotatable kubelet client certificate and key
[addons] Applied essential addon: CoreDNS
[addons] Applied essential addon: kube-proxy

Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

Alternatively, if you are the root user, you can run:

  export KUBECONFIG=/etc/kubernetes/admin.conf

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 172.19.0.11:6443 --token 9vmhsd.6542p6c90lvctme8 \
    --discovery-token-ca-cert-hash sha256:0b3f5460019c84cb3d27bc5ea2d5ec588d9bd407a864dbd09a3e27965315b907





ubuntu@vmworker:~$ sudo swapoff -a
ubuntu@vmworker:~$ sudo kubeadm join 172.19.0.11:6443 --token 9vmhsd.6542p6c90lvctme8     --discovery-token-ca-cert-hash sha256:0b3f5460019c84cb3d27bc5ea2d5ec588d9bd407a864dbd09a3e27965315b907
[preflight] Running pre-flight checks
[preflight] Reading configuration from the cluster...
[preflight] FYI: You can look at this config file with 'kubectl -n kube-system get cm kubeadm-config -o yaml'
[kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
[kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
[kubelet-start] Starting the kubelet
[kubelet-start] Waiting for the kubelet to perform the TLS Bootstrap...

This node has joined the cluster:
* Certificate signing request was sent to apiserver and a response was received.
* The Kubelet was informed of the new secure connection details.

Run 'kubectl get nodes' on the control-plane to see this node join the cluster.

-= Master =-
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

ubuntu@vmmaster:~$ kubectl get no -o wide
NAME                STATUS     ROLES                  AGE     VERSION   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION     CONTAINER-RUNTIME
vmmaster.arlab.pw   NotReady   control-plane,master   4m57s   v1.20.0   172.19.0.11   <none>        Ubuntu 20.04.1 LTS   5.4.0-26-generic   docker://19.3.8
vmworker.arlab.pw   NotReady   <none>                 2m10s   v1.20.1   172.19.0.12   <none>        Ubuntu 20.04.1 LTS   5.4.0-26-generic   docker://19.3.8

ubuntu@vmmaster:~$ kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
podsecuritypolicy.policy/psp.flannel.unprivileged created
clusterrole.rbac.authorization.k8s.io/flannel created
clusterrolebinding.rbac.authorization.k8s.io/flannel created
serviceaccount/flannel created
configmap/kube-flannel-cfg created

ubuntu@vmmaster:~$ kubectl get po -o wide --all-namespaces
NAMESPACE     NAME                                        READY   STATUS    RESTARTS   AGE     IP            NODE                NOMINATED NODE   READINESS GATES
kube-system   coredns-74ff55c5b-s2c4j                     0/1     Running   0          5m40s   10.244.0.3    vmmaster.arlab.pw   <none>           <none>
kube-system   coredns-74ff55c5b-tnf4t                     0/1     Running   0          5m40s   10.244.0.2    vmmaster.arlab.pw   <none>           <none>
kube-system   etcd-vmmaster.arlab.pw                      1/1     Running   0          5m52s   172.19.0.11   vmmaster.arlab.pw   <none>           <none>
kube-system   kube-apiserver-vmmaster.arlab.pw            1/1     Running   0          5m52s   172.19.0.11   vmmaster.arlab.pw   <none>           <none>
kube-system   kube-controller-manager-vmmaster.arlab.pw   1/1     Running   0          5m52s   172.19.0.11   vmmaster.arlab.pw   <none>           <none>
kube-system   kube-flannel-ds-5r76c                       1/1     Running   0          26s     172.19.0.11   vmmaster.arlab.pw   <none>           <none>
kube-system   kube-flannel-ds-w2ftd                       1/1     Running   0          26s     172.19.0.12   vmworker.arlab.pw   <none>           <none>
kube-system   kube-proxy-5mmr6                            1/1     Running   0          3m11s   172.19.0.12   vmworker.arlab.pw   <none>           <none>
kube-system   kube-proxy-z5csd                            1/1     Running   0          5m40s   172.19.0.11   vmmaster.arlab.pw   <none>           <none>
kube-system   kube-scheduler-vmmaster.arlab.pw            1/1     Running   0          5m52s   172.19.0.11   vmmaster.arlab.pw   <none>           <none>

ubuntu@vmmaster:~$ kubectl get no -o wide
NAME                STATUS   ROLES                  AGE     VERSION   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION     CONTAINER-RUNTIME
vmmaster.arlab.pw   Ready    control-plane,master   6m23s   v1.20.0   172.19.0.11   <none>        Ubuntu 20.04.1 LTS   5.4.0-26-generic   docker://19.3.8
vmworker.arlab.pw   Ready    <none>                 3m36s   v1.20.1   172.19.0.12   <none>        Ubuntu 20.04.1 LTS   5.4.0-26-generic   docker://19.3.8

ubuntu@vmmaster:~$ kubectl get po --all-namespaces -o wide
NAMESPACE              NAME                                         READY   STATUS    RESTARTS   AGE   IP            NODE                NOMINATED NODE   READINESS GATES
kube-system            coredns-74ff55c5b-s2c4j                      1/1     Running   1          33m   10.244.0.5    vmmaster.arlab.pw   <none>           <none>
kube-system            coredns-74ff55c5b-tnf4t                      1/1     Running   1          33m   10.244.0.4    vmmaster.arlab.pw   <none>           <none>
kube-system            etcd-vmmaster.arlab.pw                       1/1     Running   1          34m   172.19.0.11   vmmaster.arlab.pw   <none>           <none>
kube-system            kube-apiserver-vmmaster.arlab.pw             1/1     Running   1          34m   172.19.0.11   vmmaster.arlab.pw   <none>           <none>
kube-system            kube-controller-manager-vmmaster.arlab.pw    1/1     Running   1          34m   172.19.0.11   vmmaster.arlab.pw   <none>           <none>
kube-system            kube-flannel-ds-5r76c                        1/1     Running   1          28m   172.19.0.11   vmmaster.arlab.pw   <none>           <none>
kube-system            kube-flannel-ds-w2ftd                        1/1     Running   0          28m   172.19.0.12   vmworker.arlab.pw   <none>           <none>
kube-system            kube-proxy-5mmr6                             1/1     Running   0          31m   172.19.0.12   vmworker.arlab.pw   <none>           <none>
kube-system            kube-proxy-z5csd                             1/1     Running   1          33m   172.19.0.11   vmmaster.arlab.pw   <none>           <none>
kube-system            kube-scheduler-vmmaster.arlab.pw             1/1     Running   1          34m   172.19.0.11   vmmaster.arlab.pw   <none>           <none>
kubernetes-dashboard   dashboard-metrics-scraper-7b59f7d4df-ph956   1/1     Running   0          36s   10.244.0.7    vmmaster.arlab.pw   <none>           <none>
kubernetes-dashboard   kubernetes-dashboard-74d688b6bc-jvk7b        1/1     Running   0          36s   10.244.0.6    vmmaster.arlab.pw   <none>           <none>




ubuntu@vmmaster:~$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml
namespace/kubernetes-dashboard created
serviceaccount/kubernetes-dashboard created
service/kubernetes-dashboard created
secret/kubernetes-dashboard-certs created
secret/kubernetes-dashboard-csrf created
secret/kubernetes-dashboard-key-holder created
configmap/kubernetes-dashboard-settings created
role.rbac.authorization.k8s.io/kubernetes-dashboard created
clusterrole.rbac.authorization.k8s.io/kubernetes-dashboard created
rolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created
clusterrolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created
deployment.apps/kubernetes-dashboard created
service/dashboard-metrics-scraper created
deployment.apps/dashboard-metrics-scraper created



ubuntu@vmmaster:~$ kubectl proxy --address="172.19.0.11"
Starting to serve on 172.19.0.11:8001

